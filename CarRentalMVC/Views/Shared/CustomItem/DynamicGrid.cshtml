@model CarRentalMVC.Models.DynamicGrid.DynamicGridViewModel

<table class="table table-bordered table-striped">
    <thead class="thead-dark">
        <tr>
            @if (Model.Data != null && Model.Data.Any())
            {
                foreach (var property in Model.Data.First().GetType().GetProperties())
                {
                    if (IsCollection(property.PropertyType))
                        continue;

                    <th>
                        @property.Name
                        <input type="text" class="form-control form-control-sm" placeholder="Search" data-column="@property.Name" onkeyup="filterTable()">
                    </th>
                }
            }
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Data != null && Model.Data.Any())
        {
            foreach (var item in Model.Data)
            {
                <tr>
                    @foreach (var property in item.GetType().GetProperties())
                    {
                        if (IsCollection(property.PropertyType))
                            continue;

                        <td>@property.GetValue(item)</td>
                    }
                    <td>
                        <button class="btn btn-primary btn-sm"
                                data-id="@item.GetType().GetProperty("Id")?.GetValue(item)"
                                data-url="@Url.RouteUrl(new { controller = $"{@Model.BaseRoute}Edit", action = $"{@Model.BaseRoute}Edit", id = item.GetType().GetProperty("Id")?.GetValue(item) })"
                                onclick="updateItem(this)">
                            Update
                        </button>
                        <button class="btn btn-danger btn-sm"
                                data-id="@item.GetType().GetProperty("Id")?.GetValue(item)"
                                data-controller=@($"{Model.BaseRoute}Edit")
                                data-action=@($"{Model.BaseRoute}Edit")
                                onclick="deleteItem(this)">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="100%">No data available</td>
            </tr>
        }
    </tbody>
</table>

<script>
    function filterTable() {
        var input, filter, table, tr, td, i, j, txtValue;
        input = $("input[type='text']");
        table = $("table");
        tr = table.find("tbody tr");

        tr.each(function () {
            var showRow = true;
            $(this).find("td").each(function (index) {
                if (input[index] && input[index].value) {
                    txtValue = $(this).text().toUpperCase();
                    filter = input[index].value.toUpperCase();

                    if (filter.startsWith("*") && filter.endsWith("*")) {
                        filter = filter.slice(1, -1); // İçindeki * her iki uçtan da çıkar
                        if (txtValue.indexOf(filter) === -1) {
                            showRow = false;
                        }
                    } else if (filter.startsWith("*")) {
                        filter = filter.slice(1); // Sadece baştaki * çıkar
                        if (!txtValue.endsWith(filter)) {
                            showRow = false;
                        }
                    } else if (filter.endsWith("*")) {
                        filter = filter.slice(0, -1); // Sadece sonundaki * çıkar
                        if (!txtValue.startsWith(filter)) {
                            showRow = false;
                        }
                    } else {
                        if (txtValue.indexOf(filter) === -1) {
                            showRow = false;
                        }
                    }
                }
            });

            if (showRow) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }


    function updateItem(button) {
        var url = $(button).data('url');

        if (!url) {
            alert("Invalid update URL");
            return;
        }

        window.location.href = url;
    }

    function deleteItem(button) {
        var itemId = $(button).data('id');
        var controller = $(button).data('controller');
        var action = $(button).data('action');

        if (!itemId || !controller || !action) {
            alert("Invalid delete parameters");
            return;
        }

        if (confirm('Are you sure you want to delete this item?')) {
            $.ajax({
                url: '/' + controller + '/' + action,
                method: 'POST',
                data: { id: itemId },
                success: function () {
                    alert('Item deleted successfully');
                    $(button).closest('tr').remove();
                },
                error: function () {
                    alert('Error deleting item');
                }
            });
        }
    }
</script>

@functions {

    bool IsCollection(Type type)
    {
        return (type.Name.StartsWith("ICollection") ||
        type.IsClass) && type != typeof(string);
    }
}
